apply plugin: 'com.android.library'

def versionMajor = 4
def versionMinor = 1
def versionPatch = 2
def myVersionCode = versionMajor * 10000 + versionMinor * 100 + versionPatch
def myVersionName = "${versionMajor}.${versionMinor}.${versionPatch}"

android {
    compileSdkVersion project.ext.globalCompileSdkVersion

    defaultConfig {
        minSdkVersion project.ext.globalMinSdkVersion
        targetSdkVersion project.ext.globalTargetSdkVersion
    }

    testOptions.unitTests.includeAndroidResources = true
}

dependencies {
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation "com.jakewharton.timber:timber:${timberVersion}"

    testImplementation 'org.awaitility:awaitility:3.0.0'
    testImplementation 'androidx.test:core:1.4.0'
    // Robolectric
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.hamcrest:hamcrest-integration:1.3'

    testImplementation 'com.squareup.okhttp3:mockwebserver:3.12.6'

    // Mocktio
    testImplementation 'org.mockito:mockito-core:2.24.0'
    testImplementation 'org.json:json:20140107'
    testImplementation 'org.robolectric:robolectric:4.3.1'
}

/**
 * JAR
 */
task clearJar(type: Delete) {
    delete fileTree(dir: "jar", exclude: "dont_delete.txt")
}

task makeJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('jar/')
    include('classes.jar')
    def fileName = 'MatomoAndroidSdk-' + 'git rev-parse --short HEAD'.execute().text.trim() + '.jar'
    rename('classes.jar', fileName)
}

makeJar.dependsOn(clearJar, build)

/**
 * Coverage
 */
apply plugin: 'com.dicedmelon.gradle.jacoco-android'

jacoco {
    toolVersion = '0.8.5'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

/**
 * Javadoc
 */
android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        title = "Documentation for Android $android.defaultConfig.versionName b$android.defaultConfig.versionCode"
        destinationDir = new File("${project.getProjectDir()}/build/docs/javadoc/")
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        source = variant.javaCompiler.source
        doFirst {
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        }

        description "Generates Javadoc for $variant.name."

        options.memberLevel = JavadocMemberLevel.PRIVATE
        options.links("http://docs.oracle.com/javase/7/docs/api/")
        options.links("http://developer.android.com/reference/reference/")
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

def credentialsFile = new File(System.properties['user.home'], ".bintray/bintray.properties")
ext {
    if (credentialsFile.canRead()) {
        Properties props = new Properties()
        props.load(new FileInputStream(credentialsFile))
        bintrayUser = props['bintray.user']
        bintrayApiKey = props['bintray.apikey']
    }

    bintrayRepo = 'maven'
    bintrayName = 'matomo-sdk-android'

    publishedGroupId = 'org.matomo.sdk'
    libraryName = 'Matomo SDK for Android'
    artifact = 'tracker'

    libraryDescription = 'SDK for Android to measure your apps with Matomo'

    siteUrl = 'https://github.com/matomo-org/matomo-sdk-android'
    gitUrl = 'https://github.com/matomo-org/matomo-sdk-android.git'

    libraryVersion = myVersionName

    developerId = 'darken'
    developerName = 'Matthias Urhahn'
    developerEmail = 'darken@darken.eu'

    licenseName = 'BSD-3 Clause'
    licenseUrl = 'https://github.com/matomo-org/matomo-sdk-android/blob/master/LICENSE'
    allLicenses = ["BSD 3-Clause"]
}
if (credentialsFile.canRead()) {
    apply from: '../publish-to-bintray.gradle'
}
