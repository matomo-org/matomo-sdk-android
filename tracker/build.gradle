apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion project.ext.globalCompileSdkVersion

    defaultConfig {
        minSdkVersion project.ext.globalMinSdkVersion
        targetSdkVersion project.ext.globalTargetSdkVersion
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions.unitTests.includeAndroidResources = true
}

dependencies {
    implementation 'androidx.annotation:annotation:1.4.0'
    implementation "com.jakewharton.timber:timber:${timberVersion}"

    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation 'androidx.test:core:1.4.0'
    // Robolectric
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.hamcrest:hamcrest-core:2.2'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation 'org.hamcrest:hamcrest-integration:1.3'

    testImplementation 'com.squareup.okhttp3:mockwebserver:4.10.0'

    // Mocktio
    testImplementation 'org.mockito:mockito-core:4.8.0'
    testImplementation 'org.json:json:20220320'
    testImplementation 'org.robolectric:robolectric:4.8.2'
}

/**
 * Coverage
 */
apply plugin: 'com.dicedmelon.gradle.jacoco-android'

jacoco {
    toolVersion = '0.8.5'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

/**
 * Javadoc
 */
android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        title = "Documentation for Android $android.defaultConfig.versionName b$android.defaultConfig.versionCode"
        destinationDir = new File("${project.getProjectDir()}/build/docs/javadoc/")
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        source = variant.javaCompiler.source
        doFirst {
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        }

        description "Generates Javadoc for $variant.name."

        options.memberLevel = JavadocMemberLevel.PRIVATE
        options.links("http://docs.oracle.com/javase/7/docs/api/")
        options.links("http://developer.android.com/reference/reference/")
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                groupId = 'org.matomo.sdk'
                artifactId = 'tracker'
                version = getTag()

                pom {
                    name = 'Matomo SDK for Android'
                    description = 'SDK for Android to measure your apps with Matomo'
                    url = 'https://github.com/matomo-org/matomo-sdk-android'

                    licenses {
                        license {
                            name = 'BSD-3 Clause'
                            url = 'https://github.com/matomo-org/matomo-sdk-android/blob/master/LICENSE'
                        }
                    }
                }
            }
        }
    }
}

@SuppressWarnings('unused')
static def getTag() {
    def process = "git describe --tags".execute()
    return process.text.toString().trim()
}
