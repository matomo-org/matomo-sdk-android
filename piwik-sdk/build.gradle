apply plugin: 'com.android.library'

def versionMajor = 3
def versionMinor = 0
def versionPatch = 0
def myVersionCode = versionMajor * 10000 + versionMinor * 100 + versionPatch
def myVersionName = "${versionMajor}.${versionMinor}.${versionPatch}"

android {
    compileSdkVersion project.ext.globalCompileSdkVersion
    buildToolsVersion project.ext.globalBuildToolsVersion

    defaultConfig {
        minSdkVersion project.ext.globalMinSdkVersion
        targetSdkVersion project.ext.globalTargetSdkVersion
        versionCode myVersionCode
        versionName myVersionName
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation "com.android.support:support-annotations:${supportLibVersion}"
    implementation "com.jakewharton.timber:timber:${timberVersion}"

    testImplementation 'org.awaitility:awaitility:3.0.0'
    // Robolectric
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.hamcrest:hamcrest-integration:1.3'

    testImplementation 'com.squareup.okhttp3:mockwebserver:3.8.1'

    // Mocktio
    testImplementation 'org.mockito:mockito-core:2.8.9'
    testImplementation 'org.json:json:20140107'
    testImplementation('org.robolectric:robolectric:2.4') {
        exclude module: 'classworlds'
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-provider-api'
    }
}

/**
 * JAR
 */
task clearJar(type: Delete) {
    delete fileTree(dir: "jar", exclude: "dont_delete.txt")
}

task makeJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('jar/')
    include('classes.jar')
    def fileName = 'PiwikAndroidSdk-' + 'git rev-parse --short HEAD'.execute().text.trim() + '.jar'
    rename('classes.jar', fileName)
}

makeJar.dependsOn(clearJar, build)

/**
 * Coverage
 */
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['org/piwik/R*.class',
                       '**/BuildConfig.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories = files([
            'src/main/java',
    ])
    executionData = files('build/jacoco/testDebugUnitTest.exec')
}

coveralls {
    jacocoReportPath = 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
    sourceDirs = ['src/main/java']
}

/**
 * Javadoc
 */
android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        title = "Documentation for Android $android.defaultConfig.versionName b$android.defaultConfig.versionCode"
        destinationDir = new File("${project.getProjectDir()}/build/docs/javadoc/")
        source = variant.javaCompile.source

        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

        description "Generates Javadoc for $variant.name."

        options.memberLevel = JavadocMemberLevel.PRIVATE
        options.links("http://docs.oracle.com/javase/7/docs/api/")
        options.links("http://developer.android.com/reference/reference/")
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

def credentialsFile = new File(System.properties['user.home'], ".bintray/bintray.properties")
ext {
    if (credentialsFile.canRead()) {
        Properties props = new Properties()
        props.load(new FileInputStream(credentialsFile))
        bintrayUser = props['bintray.user']
        bintrayApiKey = props['bintray.apikey']
    }

    bintrayRepo = 'maven'
    bintrayName = 'piwik-sdk-android'

    publishedGroupId = 'org.piwik.sdk'
    libraryName = 'Piwik SDK for Android'
    artifact = 'piwik-sdk'

    libraryDescription = 'SDK for Android to measure your apps with Piwik '

    siteUrl = 'https://github.com/piwik/piwik-sdk-android'
    gitUrl = 'https://github.com/piwik/piwik-sdk-android.git'

    libraryVersion = myVersionName

    developerId = 'darken'
    developerName = 'Matthias Urhahn'
    developerEmail = 'darken@darken.eu'

    licenseName = 'BSD-3 Clause'
    licenseUrl = 'https://github.com/piwik/piwik-sdk-android/blob/master/LICENSE'
    allLicenses = ["BSD 3-Clause"]
}
if (credentialsFile.canRead()) {
    apply from: '../publish-to-bintray.gradle'
}
